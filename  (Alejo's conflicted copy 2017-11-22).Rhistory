totTime = proc.time() - tic
print(paste("Total processing time (in minutes):",
(totTime[3] / 60) %>% round(2)))
}
library(dplyr)
library(cld2)
library(plotly)
# library(pbapply)
# library(parallel)
source("myFunctions.R")
Sys.setenv("plotly_username" = "landrad78")
Sys.setenv("plotly_api_key" = "JUuLrFcCqExiWblQbHup")
data.folder = "/Users/alejandro/Coursera Data Science Capstone Data/en_US/"
myObjects = list.files(data.folder, pattern = ".rds")
other = myObjects %>% grep("^(bi|tri|ex|word)", .)
myObjects = myObjects[-other]
for (i in 1:length(myObjects)) {
tic = proc.time()
print(paste("Reading file:", myObjects[i], "..."))
dat = readRDS(paste0(data.folder, myObjects[i]))
print("Finished reading file.")
# word frequency
print(paste("Calculating word frequency for:", myObjects[i], "..."))
wordFreq = dat %>% getWordFreq()
# Bigrams
print(paste("Calculating bigrams for:", myObjects[i], "..."))
biGrams = dat %>% getNGrams(2)
# Trigrams
print(paste("Calculating trigrams for:", myObjects[i], "..."))
triGrams = dat %>% getNGrams(3)
# Detect languages
cl = makeCluster(4L)
print(paste("Detecting languages for:", myObjects[i], "..."))
languages = dat %>% pbsapply(cl = cl, FUN = function(x) paste(x, collapse = " ")
%>% detect_language) %>% table()
stopCluster(cl)
# Plots
print(paste("Creating plots for:", myObjects[i], "..."))
dtf = dtm(wordFreq)
dtf2 = dtm(biGrams)
dtf3 = dtm(triGrams)
dtl = dtm(languages)
# wordFreqPlot = plot_ly(data = dtf[1:20, ],
#                        type = "bar", orientation = "h",
#                        x = ~term %>% factor, y = ~Freq)
percPlot = plot_ly(data = dtf, type = "scatter", mode = "lines",
x = ~term, y = ~Perc)
biGramPlot = plot_ly(data = dtf2[1:10, ],
type = "bar", orientation = "h",
x = ~term %>% factor, y = ~Freq)
triGramPlot = plot_ly(data = dtf3[1:10, ],
type = "bar", orientation = "h",
x = ~term %>% factor, y = ~Freq)
langPlot = plot_ly(data = dtl, type = "bar",
x = ~lang %>% factor(), y = ~Freq)
p = subplot(percPlot, biGramPlot, triGramPlot, langPlot, nrows = 2)
api_create(percPlot, filename = paste("Frequencies", myObjects[i]),
fileopt = "overwrite", sharing = "public")
print("Finished creating plots.")
print(paste("Saving objects for:", myObjects[i], "..."))
saveRDS(wordFreq, paste0(data.folder, "wordFreq_", myObjects[i]))
saveRDS(biGrams, paste0(data.folder, "biGrams_", myObjects[i]))
saveRDS(triGrams, paste0(data.folder, "triGrams_", myObjects[i]))
saveRDS(p, paste0(data.folder, "exPlot_", myObjects[i]))
totTime = proc.time() - tic
print(paste("Total processing time (in minutes):",
(totTime[3] / 60) %>% round(2)))
}
source("myFunctions.R")
biGrams = dat %>% getNGrams(2)
source("myFunctions.R")
biGrams = dat %>% getNGrams(2)
source("myFunctions.R")
biGrams = dat %>% getNGrams(2)
source("myFunctions.R")
biGrams = dat %>% getNGrams(2)
source("myFunctions.R")
biGrams = dat %>% getNGrams(2)
source("myFunctions.R")
biGrams = dat %>% getNGrams(2)
source("myFunctions.R")
biGrams = dat %>% getNGrams(2)
source("myFunctions.R")
biGrams = dat %>% getNGrams(N = 2)
source("myFunctions.R")
biGrams = dat %>% getNGrams(N = 2)
source("myFunctions.R")
biGrams = dat %>% getNGrams(N = 2)
source("myFunctions.R")
biGrams = dat %>% getNGrams(N = 2)
source("myFunctions.R")
biGrams = dat %>% getNGrams(N = 2)
source("myFunctions.R")
biGrams = dat %>% getNGrams(N = 2)
source("myFunctions.R")
biGrams = dat %>% getNGrams(N = 2)
source("myFunctions.R")
biGrams = dat %>% getNGrams(N = 2)
View(biGrams)
library(dplyr)
library(cld2)
library(plotly)
# library(pbapply)
# library(parallel)
source("myFunctions.R")
Sys.setenv("plotly_username" = "landrad78")
Sys.setenv("plotly_api_key" = "JUuLrFcCqExiWblQbHup")
data.folder = "/Users/alejandro/Coursera Data Science Capstone Data/en_US/"
myObjects = list.files(data.folder, pattern = ".rds")
other = myObjects %>% grep("^(bi|tri|ex|word)", .)
myObjects = myObjects[-other]
for (i in 1:length(myObjects)) {
tic = proc.time()
print(paste("Reading file:", myObjects[i], "..."))
dat = readRDS(paste0(data.folder, myObjects[i]))
print("Finished reading file.")
# word frequency
print(paste("Calculating word frequency for:", myObjects[i], "..."))
wordFreq = dat %>% getWordFreq()
# Bigrams
print(paste("Calculating bigrams for:", myObjects[i], "..."))
biGrams = dat %>% getNGrams(N = 2)
# Trigrams
print(paste("Calculating trigrams for:", myObjects[i], "..."))
triGrams = dat %>% getNGrams(N = 3)
# Detect languages
cl = makeCluster(4L)
print(paste("Detecting languages for:", myObjects[i], "..."))
languages = dat %>% pbsapply(cl = cl, FUN = function(x) paste(x, collapse = " ")
%>% detect_language) %>% table()
stopCluster(cl)
# Plots
print(paste("Creating plots for:", myObjects[i], "..."))
dtf = dtm(wordFreq)
dtf2 = dtm(biGrams)
dtf3 = dtm(triGrams)
dtl = dtm(languages)
# wordFreqPlot = plot_ly(data = dtf[1:20, ],
#                        type = "bar", orientation = "h",
#                        x = ~term %>% factor, y = ~Freq)
percPlot = plot_ly(data = dtf, type = "scatter", mode = "lines",
x = ~term, y = ~Perc)
biGramPlot = plot_ly(data = dtf2[1:10, ],
type = "bar", orientation = "h",
x = ~term %>% factor, y = ~Freq)
triGramPlot = plot_ly(data = dtf3[1:10, ],
type = "bar", orientation = "h",
x = ~term %>% factor, y = ~Freq)
langPlot = plot_ly(data = dtl, type = "bar",
x = ~lang %>% factor(), y = ~Freq)
p = subplot(percPlot, biGramPlot, triGramPlot, langPlot, nrows = 2)
api_create(percPlot, filename = paste("Frequencies", myObjects[i]),
fileopt = "overwrite", sharing = "public")
print("Finished creating plots.")
print(paste("Saving objects for:", myObjects[i], "..."))
saveRDS(wordFreq, paste0(data.folder, "wordFreq_", myObjects[i]))
saveRDS(biGrams, paste0(data.folder, "biGrams_", myObjects[i]))
saveRDS(triGrams, paste0(data.folder, "triGrams_", myObjects[i]))
saveRDS(p, paste0(data.folder, "exPlot_", myObjects[i]))
totTime = proc.time() - tic
print(paste("Total processing time (in minutes):",
(totTime[3] / 60) %>% round(2)))
}
library(dplyr)
library(cld2)
library(plotly)
# library(pbapply)
# library(parallel)
source("myFunctions.R")
Sys.setenv("plotly_username" = "landrad78")
Sys.setenv("plotly_api_key" = "JUuLrFcCqExiWblQbHup")
data.folder = "/Users/alejandro/Coursera Data Science Capstone Data/en_US/"
myObjects = list.files(data.folder, pattern = ".rds")
other = myObjects %>% grep("^(bi|tri|ex|word)", .)
myObjects = myObjects[-other]
for (i in 1:length(myObjects)) {
tic = proc.time()
print(paste("Reading file:", myObjects[i], "..."))
dat = readRDS(paste0(data.folder, myObjects[i]))
print("Finished reading file.")
# word frequency
print(paste("Calculating word frequency for:", myObjects[i], "..."))
wordFreq = dat %>% getWordFreq()
# Bigrams
print(paste("Calculating bigrams for:", myObjects[i], "..."))
biGrams = dat %>% getNGrams(N = 2)
# Trigrams
print(paste("Calculating trigrams for:", myObjects[i], "..."))
triGrams = dat %>% getNGrams(N = 3)
# Detect languages
cl = makeCluster(4L)
print(paste("Detecting languages for:", myObjects[i], "..."))
languages = dat %>% pbsapply(cl = cl, FUN = function(x) paste(x, collapse = " ")
%>% detect_language) %>% table()
stopCluster(cl)
# Plots
print(paste("Creating plots for:", myObjects[i], "..."))
dtf = dtm(wordFreq)
dtf2 = dtm(biGrams)
dtf3 = dtm(triGrams)
dtl = dtm(languages)
# wordFreqPlot = plot_ly(data = dtf[1:20, ],
#                        type = "bar", orientation = "h",
#                        x = ~term %>% factor, y = ~Freq)
percPlot = plot_ly(data = dtf, type = "scatter", mode = "lines",
x = ~term, y = ~Perc)
biGramPlot = plot_ly(data = dtf2[1:10, ],
type = "bar", orientation = "h",
x = ~term %>% factor, y = ~Freq)
triGramPlot = plot_ly(data = dtf3[1:10, ],
type = "bar", orientation = "h",
x = ~term %>% factor, y = ~Freq)
langPlot = plot_ly(data = dtl, type = "bar",
x = ~lang %>% factor(), y = ~Freq)
p = subplot(percPlot, biGramPlot, triGramPlot, langPlot, nrows = 2)
api_create(percPlot, filename = paste("Frequencies", myObjects[i]),
fileopt = "overwrite", sharing = "public")
print("Finished creating plots.")
print(paste("Saving objects for:", myObjects[i], "..."))
saveRDS(wordFreq, paste0(data.folder, "wordFreq_", myObjects[i]))
saveRDS(biGrams, paste0(data.folder, "biGrams_", myObjects[i]))
saveRDS(triGrams, paste0(data.folder, "triGrams_", myObjects[i]))
saveRDS(p, paste0(data.folder, "exPlot_", myObjects[i]))
totTime = proc.time() - tic
print(paste("Total processing time (in minutes):",
(totTime[3] / 60) %>% round(2)))
}
source("myFunctions.R")
languages = dat %>% detectLanguage()
languages = pbsapply(dat, detectLanguage)
languages = pbsapply(dat, detectLanguage, cl = cl)
source("myFunctions.R")
languages = pbsapply(dat, detectLanguage, cl = cl)
languages[!is.na(names(languages))] %>%
data.frame(term = names(.),
Freq = .)
languages[!is.na(languages)] %>%
data.frame(term = names(.),
Freq = .)
languages[!is.na(languages)]
languages[!is.na(languages)] %>% table %>%
data.frame(term = names(.),
Freq = .)
languages[!is.na(languages)] %>% table
languages[!is.na(languages)] %>% table %>%
data.frame(term = name(.),
Freq = .)
languages[!is.na(languages)] %>% table %>%
data.frame(term = names(.),
Freq = .)
languages = languages[!is.na(languages)] %>% table
languages
dtl = dtm(languages)
# Detect languages
cl = makeCluster(4L)
print(paste("Detecting languages for:", myObjects[i], "..."))
languages = pbsapply(dat, detectLanguage, cl = cl)
stopCluster(cl)
languages = languages[!is.na(languages)] %>% table %>% data.frame
languages
dtl = dtm(languages)
dtl
languages
languages = languages[!is.na(languages)] %>% table %>% data.frame(lang = .)
languages = pbsapply(dat, detectLanguage, cl = cl)
# Detect languages
cl = makeCluster(4L)
print(paste("Detecting languages for:", myObjects[i], "..."))
languages = pbsapply(dat, detectLanguage, cl = cl)
stopCluster(cl)
languages = languages[!is.na(languages)] %>% table %>% data.frame(lang = .)
dtl = dtm(languages)
languages
library(dplyr)
library(plotly)
library(pbapply)
# library(parallel)
source("myFunctions.R")
Sys.setenv("plotly_username" = "landrad78")
Sys.setenv("plotly_api_key" = "JUuLrFcCqExiWblQbHup")
data.folder = "/Users/alejandro/Coursera Data Science Capstone Data/en_US/"
myObjects = list.files(data.folder, pattern = ".rds")
other = myObjects %>% grep("^(bi|tri|ex|word)", .)
myObjects = myObjects[-other]
for (i in 1:length(myObjects)) {
tic = proc.time()
print(paste("Reading file:", myObjects[i], "..."))
dat = readRDS(paste0(data.folder, myObjects[i]))
print("Finished reading file.")
# word frequency
print(paste("Calculating word frequency for:", myObjects[i], "..."))
wordFreq = dat %>% getWordFreq()
# Bigrams
print(paste("Calculating bigrams for:", myObjects[i], "..."))
biGrams = dat %>% getNGrams(N = 2)
# Trigrams
print(paste("Calculating trigrams for:", myObjects[i], "..."))
triGrams = dat %>% getNGrams(N = 3)
# Detect languages
cl = makeCluster(4L)
print(paste("Detecting languages for:", myObjects[i], "..."))
languages = pbsapply(dat, detectLanguage, cl = cl)
stopCluster(cl)
languages = languages[!is.na(languages)] %>% table %>% data.frame()
# Plots
print(paste("Creating plots for:", myObjects[i], "..."))
dtf = dtm(wordFreq)
dtf2 = dtm(biGrams)
dtf3 = dtm(triGrams)
dtl = dtm(languages)
# wordFreqPlot = plot_ly(data = dtf[1:20, ],
#                        type = "bar", orientation = "h",
#                        x = ~term %>% factor, y = ~Freq)
percPlot = plot_ly(data = dtf, type = "scatter", mode = "lines",
x = ~term, y = ~CumPerc)
biGramPlot = plot_ly(data = dtf2[1:10, ],
type = "bar", orientation = "h",
x = ~term %>% factor, y = ~Freq)
triGramPlot = plot_ly(data = dtf3[1:10, ],
type = "bar", orientation = "h",
x = ~term %>% factor, y = ~Freq)
langPlot = plot_ly(data = dtl, type = "bar",
x = ~. %>% factor(), y = ~Perc)
p = subplot(percPlot, biGramPlot, triGramPlot, langPlot, nrows = 2)
api_create(percPlot, filename = paste("Frequencies", myObjects[i]),
fileopt = "overwrite", sharing = "public")
print("Finished creating plots.")
print(paste("Saving objects for:", myObjects[i], "..."))
saveRDS(wordFreq, paste0(data.folder, "wordFreq_", myObjects[i]))
saveRDS(biGrams, paste0(data.folder, "biGrams_", myObjects[i]))
saveRDS(triGrams, paste0(data.folder, "triGrams_", myObjects[i]))
saveRDS(p, paste0(data.folder, "exPlot_", myObjects[i]))
totTime = proc.time() - tic
print(paste("Total processing time (in minutes):",
(totTime[3] / 60) %>% round(2)))
}
library(dplyr)
library(plotly)
library(pbapply)
# library(parallel)
source("myFunctions.R")
Sys.setenv("plotly_username" = "landrad78")
Sys.setenv("plotly_api_key" = "JUuLrFcCqExiWblQbHup")
data.folder = "/Users/alejandro/Coursera Data Science Capstone Data/en_US/"
myObjects = list.files(data.folder, pattern = ".rds")
other = myObjects %>% grep("^(bi|tri|ex|word)", .)
myObjects = myObjects[-other]
for (i in 1:length(myObjects)) {
tic = proc.time()
print(paste("Reading file:", myObjects[i], "..."))
dat = readRDS(paste0(data.folder, myObjects[i]))
print("Finished reading file.")
# word frequency
print(paste("Calculating word frequency for:", myObjects[i], "..."))
wordFreq = dat %>% getWordFreq()
# Bigrams
print(paste("Calculating bigrams for:", myObjects[i], "..."))
biGrams = dat %>% getNGrams(N = 2)
# Trigrams
print(paste("Calculating trigrams for:", myObjects[i], "..."))
triGrams = dat %>% getNGrams(N = 3)
# Detect languages
cl = makeCluster(4L)
print(paste("Detecting languages for:", myObjects[i], "..."))
languages = pbsapply(dat, detectLanguage, cl = cl)
stopCluster(cl)
languages = languages[!is.na(languages)] %>% table %>% data.frame()
# Plots
print(paste("Creating plots for:", myObjects[i], "..."))
dtf = dtm(wordFreq)
dtf2 = dtm(biGrams)
dtf3 = dtm(triGrams)
dtl = dtm(languages)
# wordFreqPlot = plot_ly(data = dtf[1:20, ],
#                        type = "bar", orientation = "h",
#                        x = ~term %>% factor, y = ~Freq)
percPlot = plot_ly(data = dtf, type = "scatter", mode = "lines",
x = ~term, y = ~CumPerc)
biGramPlot = plot_ly(data = dtf2[1:10, ],
type = "bar", orientation = "h",
x = ~term %>% factor, y = ~Freq)
triGramPlot = plot_ly(data = dtf3[1:10, ],
type = "bar", orientation = "h",
x = ~term %>% factor, y = ~Freq)
langPlot = plot_ly(data = dtl, type = "bar",
x = ~. %>% factor(), y = ~Perc)
p = subplot(percPlot, biGramPlot, triGramPlot, langPlot, nrows = 2)
api_create(p, filename = paste("Frequencies", myObjects[i]),
fileopt = "overwrite", sharing = "public")
print("Finished creating plots.")
print(paste("Saving objects for:", myObjects[i], "..."))
saveRDS(wordFreq, paste0(data.folder, "wordFreq_", myObjects[i]))
saveRDS(biGrams, paste0(data.folder, "biGrams_", myObjects[i]))
saveRDS(triGrams, paste0(data.folder, "triGrams_", myObjects[i]))
saveRDS(p, paste0(data.folder, "exPlot_", myObjects[i]))
totTime = proc.time() - tic
print(paste("Total processing time (in minutes):",
(totTime[3] / 60) %>% round(2)))
}
library(dplyr)
library(plotly)
library(pbapply)
# library(parallel)
source("myFunctions.R")
Sys.setenv("plotly_username" = "landrad78")
Sys.setenv("plotly_api_key" = "JUuLrFcCqExiWblQbHup")
data.folder = "/Users/alejandro/Coursera Data Science Capstone Data/en_US/"
myObjects = list.files(data.folder, pattern = ".rds")
other = myObjects %>% grep("^(bi|tri|ex|word)", .)
myObjects = myObjects[-other]
for (i in 1:length(myObjects)) {
tic = proc.time()
print(paste("Reading file:", myObjects[i], "..."))
dat = readRDS(paste0(data.folder, myObjects[i]))
print("Finished reading file.")
# word frequency
print(paste("Calculating word frequency for:", myObjects[i], "..."))
wordFreq = dat %>% getWordFreq()
# Bigrams
print(paste("Calculating bigrams for:", myObjects[i], "..."))
biGrams = dat %>% getNGrams(N = 2)
# Trigrams
print(paste("Calculating trigrams for:", myObjects[i], "..."))
triGrams = dat %>% getNGrams(N = 3)
# Detect languages
cl = makeCluster(4L)
print(paste("Detecting languages for:", myObjects[i], "..."))
languages = pbsapply(dat, detectLanguage, cl = cl)
stopCluster(cl)
languages = languages[!is.na(languages)] %>% table %>% data.frame()
# Plots
print(paste("Creating plots for:", myObjects[i], "..."))
dtf = dtm(wordFreq)
dtf2 = dtm(biGrams)
dtf3 = dtm(triGrams)
dtl = dtm(languages)
# wordFreqPlot = plot_ly(data = dtf[1:20, ],
#                        type = "bar", orientation = "h",
#                        x = ~term %>% factor, y = ~Freq)
percPlot = plot_ly(data = dtf, type = "scatter", mode = "lines",
x = ~term, y = ~CumPerc)
biGramPlot = plot_ly(data = dtf2[1:10, ],
type = "bar",
x = ~term %>% factor, y = ~Freq)
triGramPlot = plot_ly(data = dtf3[1:10, ],
type = "bar",
x = ~term %>% factor, y = ~Freq)
langPlot = plot_ly(data = dtl, type = "bar",
x = ~. %>% factor(), y = ~Perc)
p = subplot(percPlot, biGramPlot, triGramPlot, langPlot, nrows = 2)
api_create(p, filename = paste("Frequencies", myObjects[i]),
fileopt = "overwrite", sharing = "public")
print("Finished creating plots.")
print(paste("Saving objects for:", myObjects[i], "..."))
saveRDS(wordFreq, paste0(data.folder, "wordFreq_", myObjects[i]))
saveRDS(biGrams, paste0(data.folder, "biGrams_", myObjects[i]))
saveRDS(triGrams, paste0(data.folder, "triGrams_", myObjects[i]))
saveRDS(p, paste0(data.folder, "exPlot_", myObjects[i]))
totTime = proc.time() - tic
print(paste("Total processing time (in minutes):",
(totTime[3] / 60) %>% round(2)))
}
library(dplyr)
library(parallel)
library(pbapply)
source("myFunctions.R")
con = url("http://www.cs.cmu.edu/~biglou/resources/bad-words.txt")
badwords = readLines(con)[-1]
close(con)
saveRDS(badwords, "badWordsDict.rds")
# get file names in folder
data.folder = "/Users/alejandro/Coursera Data Science Capstone Data/en_US/"
myFiles = list.files(data.folder, pattern = ".txt")
linesToRead = 800000
stats = NULL
for (i in 1:length(myFiles)) {
tic = proc.time()
# Read a chunck of data
print(paste("Reading file:", myFiles[i], "..."))
con = file(paste0(data.folder, myFiles[i]), "r")
# myLines = readLines(con)
myLines = readLines(con, linesToRead)
close(con)
print("Finished reading file.")
# Start up a parallel cluster
cl = makeCluster(4L)
# compute descriptive stats for raw data
print(paste("Calculating descriptives in raw file:", myFiles[i], "..."))
rawStats = pblapply(myLines, describeLines, cl = cl)
# sample 10% of data
set.seed(80537)
partition = rbinom(length(myLines), 1, 0.01)
myLinesSample = myLines[which(partition == 1)]
# clean text
print(paste("Cleaning sampled text in file:", myFiles[i], "..."))
myText = pblapply(myLinesSample, cleanLine, cl = cl)
# myText = parLapply(cl, myLinesSample, cleanLine)
# save objects to hard drive
print("Saving objects...")
objName = strsplit(myFiles[i], split = "\\.")[[1]][2]
saveRDS(myText, paste0(data.folder, objName, ".rds"))
# close cluster connection
stopCluster(cl)
# compute descriptive statistics
stats = rbind(stats, c(objName, textStats(rawStats)))
totTime = proc.time() - tic
print(paste("Total processing time (in minutes):",
(totTime[3] / 60) %>% round(2)))
}
cat("Raw frequencies...\n")
stats
write.csv(stats, paste0(data.folder, "rawStatistics.csv"), row.names = F)
